# main_window.py
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import wave

import numpy as np
from PyQt5.QtWidgets import QApplication, QMainWindow
from pydub import AudioSegment
from scipy.ndimage import gaussian_filter1d
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QWidget
from PyQt5.QtGui import QPainter, QPen, QPainterPath
from PyQt5.QtCore import Qt


def read_waveform(file_path):
    audio = AudioSegment.from_file(file_path)
    samples = np.array(audio.get_array_of_samples())
    if audio.channels == 2:
        samples = samples[::2]  # Take one channel if stereo
    samples = samples / np.max(np.abs(samples))  # Normalize
    max_points = 5000
    if len(samples) > max_points:
        factor = len(samples) // max_points
        samples = samples[::factor]
    return samples


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # Widget placeholder
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(100, 140, 1000, 370))
        self.widget.setObjectName("widget")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))


class WaveformWidget(QWidget):
    def __init__(self, parent=None):
        super(WaveformWidget, self).__init__(parent)
        self.waveform_data = None
        self.y_scale = 1.0

    def set_waveform_data(self, data):
        self.waveform_data = data
        self.update()

    def paintEvent(self, event):
        if self.waveform_data is None:
            return

        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        pen = QPen(Qt.blue)
        pen.setWidth(2)
        painter.setPen(pen)

        width = self.width()
        height = self.height()
        data_len = len(self.waveform_data)

        x_scale = width / data_len
        y_center = height / 2
        y_scale = y_center * self.y_scale

        path = QPainterPath()
        path.moveTo(0, y_center - self.waveform_data[0] * y_scale)

        for i in range(1, data_len):
            x = i * x_scale
            y = y_center - self.waveform_data[i] * y_scale
            path.lineTo(x, y)

        painter.drawPath(path)


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)

        # Replace the placeholder widget with WaveformWidget
        self.waveform_widget = WaveformWidget(self.centralwidget)
        self.waveform_widget.setGeometry(100, 140, 1000, 370)

        # Read waveform data from the audio file
        waveform = read_waveform('assets/Cowboy Bebop - Full.wav')

        self.waveform_widget.set_waveform_data(waveform)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
